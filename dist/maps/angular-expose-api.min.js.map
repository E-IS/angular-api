{"version":3,"sources":["angular-expose-api.js"],"names":["window","angular","undefined","module","factory","$q","$rootScope","Api","appInstance","apiId","this","gantt","eventListeners","registerEventWithAngular","eventId","handler","app","_this","$on","args","Array","prototype","slice","call","arguments","splice","apply","suppressEvents","listenerFuncs","callBackFn","self","listeners","isArray","foundListeners","forEach","l","filter","lstnr","dereg","registerEvent","featureName","eventName","feature","on","raise","raisePromise","$emit","concat","listenerCount","$$listenerCount","when","deferred","defer","promise","notify","raw","count","errors","results","checkFinish","length","reject","resolve","result","push","err","eventArgs","scope","listener","removeListener","index","indexOf","hasListeners","registerMethod","methodName"],"mappings":"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","file":"../angular-expose-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n    // This file is adapted from Angular API Demo\n    // https://github.com/Schweigi/angular-api-demo\n\n    // This file is adapted from Angular UI ngGrid project (MIT License)\n    // https://github.com/angular-ui/ng-grid/blob/v3.0.0-rc.20/src/js/core/factories/GridApi.js\n    angular.module('ngApi', []).factory('Api', ['$q', '$rootScope', function($q, $rootScope) {\n        /**\n         * Api provides the ability to register public methods events inside an app and allow\n         * for other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args){}).\n         *\n         * @appInstance: App which the API is for\n         * @apiId: Unique id in case multiple API instances do exist inside the same Angular environment\n         */\n        var Api = function Api(appInstance, apiId) {\n            this.gantt = appInstance;\n            this.apiId = apiId;\n            this.eventListeners = [];\n        };\n\n        /**\n         * Used to execute a function while disabling the specified event listeners.\n         * Disables the listenerFunctions, executes the callbackFn, and then enables the listenerFunctions again\n         *\n         * @listenerFuncs: Listener function or array of listener functions to suppress. These must be the same\n         * @functions that were used in the .on.eventName method\n         * @callBackFn: Function to execute with surpressed events\n         *\n         * Example:\n         *    var clicked = function (){\n         *       // Button clicked event handler\n         *    }\n         *\n         *    api.suppressEvents(clicked, function() {\n         *       // No clicked events will be fired\n         *       api.ui.form.main.submit.click(scope);\n         *    });\n         */\n        Api.prototype.suppressEvents = function(listenerFuncs, callBackFn) {\n            var self = this;\n            var listeners = angular.isArray(listenerFuncs) ? listenerFuncs : [listenerFuncs];\n\n            var foundListeners = [];\n            listeners.forEach(function(l) {\n                foundListeners = self.eventListeners.filter(function(lstnr) {\n                    return l === lstnr.handler;\n                });\n            });\n\n            foundListeners.forEach(function(l) {\n                l.dereg();\n            });\n\n            callBackFn();\n\n            foundListeners.forEach(function(l) {\n                l.dereg = registerEventWithAngular(l.eventId, l.handler, self.gantt, l._this);\n            });\n\n        };\n\n        /**\n         * Registers a new event for the given feature.\n         *\n         * @featureName: Name of the feature that raises the event\n         * @eventName: Name of the event\n         *\n         * To trigger the event call:\n         * .raise.eventName()\n         *\n         * To register a event listener call:\n         * .on.eventName(scope, callBackFn, _this)\n         * scope: A scope reference to add a deregister call to the scopes .$on('destroy')\n         * callBackFn: The function to call\n         * _this: Optional this context variable for callbackFn. If omitted, gantt.api will be used for the context\n         *\n         * .on.eventName returns a de-register funtion that will remove the listener. It's not necessary to use it as the listener\n         * will be removed when the scope is destroyed.\n         */\n        Api.prototype.registerEvent = function(featureName, eventName) {\n            var self = this;\n            if (!self[featureName]) {\n                self[featureName] = {};\n            }\n\n            var feature = self[featureName];\n            if (!feature.on) {\n                feature.on = {};\n                feature.raise = {};\n                feature.raisePromise = {};\n            }\n\n            var eventId = 'event:api:' + this.apiId + ':' + featureName + ':' + eventName;\n\n            // Creating raise event method: featureName.raise.eventName\n            feature.raise[eventName] = function() {\n              $rootScope.$emit.apply($rootScope, [eventId].concat(Array.prototype.slice.call(arguments)));\n            };\n\n            // Creating raise that return a promise event method: featureName.raisePromise.eventName\n            feature.raisePromise[eventName] = function() {\n              // If no listener: continue\n              var listenerCount = $rootScope.$$listenerCount[eventId];\n              if (!listenerCount) {\n                return $q.when();\n              }\n              // Add promise reject/resolve has last arguments\n              var deferred = $q.defer();\n                // If more than one listener : create a buffered defferred\n              if (listenerCount > 1) {\n                  deferred = {\n                      promise: deferred.promise,\n                      notify: deferred.notify,\n                      raw: deferred,\n                      count: 0 ,\n                      errors: [],\n                      results: []\n                  };\n                  deferred.checkFinish = function() {\n                    if (deferred.count < listenerCount) return;\n                    deferred.count = 0;\n                    if (deferred.errors.length) {\n                        if (deferred.errors.length == 1) {\n                            deferred.raw.reject(deferred.errors[0]);\n                        }\n                        else {\n                            deferred.raw.reject(deferred.errors);\n                        }\n                        deferred.errors = [];\n                    }\n                    else {\n                        deferred.raw.resolve(deferred.results);\n                        deferred.results = [];\n                    }\n                  };\n                  deferred.resolve = function(result) {\n                      deferred.results.push(result);\n                      deferred.count++;\n                      deferred.checkFinish();\n                  };\n                  deferred.reject = function(err) {\n                      deferred.errors.push(err);\n                      deferred.count++;\n                      deferred.checkFinish();\n                  };\n              }\n\n              var eventArgs = [eventId].concat(Array.prototype.slice.call(arguments)).concat([deferred]);\n              $rootScope.$emit.apply($rootScope, eventArgs);\n              return deferred.promise;\n            };\n\n            // Creating on event method: featureName.oneventName\n            feature.on[eventName] = function(scope, handler, _this) {\n                var deregAngularOn = registerEventWithAngular(eventId, handler, self.gantt, _this);\n\n                var listener = {\n                    handler: handler,\n                    dereg: deregAngularOn,\n                    eventId: eventId,\n                    scope: scope,\n                    _this: _this\n                };\n                self.eventListeners.push(listener);\n\n                var removeListener = function() {\n                    listener.dereg();\n                    var index = self.eventListeners.indexOf(listener);\n                    self.eventListeners.splice(index, 1);\n                };\n\n                scope.$on('$destroy', function() {\n                    removeListener();\n                });\n\n                return removeListener;\n            };\n        };\n\n        function registerEventWithAngular(eventId, handler, app, _this) {\n            return $rootScope.$on(eventId, function() {\n                var args = Array.prototype.slice.call(arguments);\n                args.splice(0, 1); // Remove evt argument\n                handler.apply(_this ? _this : app, args);\n            });\n        }\n\n        /**\n         * Used to execute a function while disabling the specified event listeners.\n         * Disables the listenerFunctions, executes the callbackFn, and then enables the listenerFunctions again\n         *\n         * @listenerFuncs: Listener function or array of listener functions to suppress. These must be the same\n         * @functions that were used in the .on.eventName method\n         * @callBackFn: Function to execute with surpressed events\n         *\n         * Example:\n         *    var clicked = function (){\n         *       // Button clicked event handler\n         *    }\n         *\n         *    api.suppressEvents(clicked, function() {\n         *       // No clicked events will be fired\n         *       api.ui.form.main.submit.click(scope);\n         *    });\n         */\n        Api.prototype.hasListeners = function(listenerFuncs, callBackFn) {\n            var self = this;\n            var listeners = angular.isArray(listenerFuncs) ? listenerFuncs : [listenerFuncs];\n\n            var foundListeners = [];\n            listeners.forEach(function(l) {\n                foundListeners = self.eventListeners.filter(function(lstnr) {\n                    return l === lstnr.handler;\n                });\n            });\n\n            foundListeners.forEach(function(l) {\n                l.dereg();\n            });\n\n            callBackFn();\n\n            foundListeners.forEach(function(l) {\n                l.dereg = registerEventWithAngular(l.eventId, l.handler, self.gantt, l._this);\n            });\n\n        };\n\n        /**\n         * Registers a new event for the given feature\n         *\n         * @featureName: Name of the feature\n         * @methodName: Name of the method\n         * @callBackFn: Function to execute\n         * @_this: Binds callBackFn 'this' to _this. Defaults to Api.app\n         */\n        Api.prototype.registerMethod = function(featureName, methodName, callBackFn, _this) {\n            if (!this[featureName]) {\n                this[featureName] = {};\n            }\n\n            var feature = this[featureName];\n            feature[methodName] = function() {\n                callBackFn.apply(_this || this.app, arguments);\n            };\n        };\n\n        return Api;\n    }]);\n})(window, window.angular);\n\n"]}